{"@t":"2020-06-11T10:42:28.2735531Z","@mt":"Start web host"}
{"@t":"2020-06-11T10:49:04.3826250Z","@mt":"Start web host"}
{"@t":"2020-06-11T10:51:02.9134464Z","@mt":"Start web host"}
{"@t":"2020-06-11T10:51:15.1044145Z","@mt":"Host terminated unexpectedly","@l":"Fatal","@x":"System.InvalidOperationException: Unable to resolve service for type 'Serilog.Extensions.Hosting.DiagnosticContext' while attempting to activate 'Serilog.AspNetCore.RequestLoggingMiddleware'.\r\n   at Microsoft.Extensions.Internal.ActivatorUtilities.ConstructorMatcher.CreateInstance(IServiceProvider provider)\r\n   at Microsoft.Extensions.Internal.ActivatorUtilities.CreateInstance(IServiceProvider provider, Type instanceType, Object[] parameters)\r\n   at Microsoft.AspNetCore.Builder.UseMiddlewareExtensions.<>c__DisplayClass4_0.<UseMiddleware>b__0(RequestDelegate next)\r\n   at Microsoft.AspNetCore.Builder.ApplicationBuilder.Build()\r\n   at Microsoft.AspNetCore.Hosting.GenericWebHostService.StartAsync(CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Hosting.Internal.Host.StartAsync(CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.RunAsync(IHost host, CancellationToken token)\r\n   at Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.RunAsync(IHost host, CancellationToken token)\r\n   at Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.Run(IHost host)\r\n   at Serilogging.Program.Main(String[] args) in C:\\Users\\qiang.c.chen\\source\\repos\\Serilogging\\Serilogging\\Program.cs:line 34"}
{"@t":"2020-06-11T11:04:35.8740483Z","@mt":"Start web host"}
{"@t":"2020-06-11T11:04:38.2065154Z","@mt":"Host terminated unexpectedly","@l":"Fatal","@x":"System.InvalidOperationException: Unable to resolve service for type 'Serilog.Extensions.Hosting.DiagnosticContext' while attempting to activate 'Serilog.AspNetCore.RequestLoggingMiddleware'.\r\n   at Microsoft.Extensions.Internal.ActivatorUtilities.ConstructorMatcher.CreateInstance(IServiceProvider provider)\r\n   at Microsoft.Extensions.Internal.ActivatorUtilities.CreateInstance(IServiceProvider provider, Type instanceType, Object[] parameters)\r\n   at Microsoft.AspNetCore.Builder.UseMiddlewareExtensions.<>c__DisplayClass4_0.<UseMiddleware>b__0(RequestDelegate next)\r\n   at Microsoft.AspNetCore.Builder.ApplicationBuilder.Build()\r\n   at Microsoft.AspNetCore.Hosting.GenericWebHostService.StartAsync(CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Hosting.Internal.Host.StartAsync(CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.RunAsync(IHost host, CancellationToken token)\r\n   at Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.RunAsync(IHost host, CancellationToken token)\r\n   at Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.Run(IHost host)\r\n   at Serilogging.Program.Main(String[] args) in C:\\Users\\qiang.c.chen\\source\\repos\\Serilogging\\Serilogging\\Program.cs:line 34"}
{"@t":"2020-06-11T11:05:43.4718181Z","@mt":"Start web host"}
{"@t":"2020-06-11T11:09:05.5983143Z","@mt":"Start web host"}
{"@t":"2020-06-11T11:09:08.0973908Z","@mt":"Hosting starting","@l":"Debug","EventId":{"Id":1},"SourceContext":"Microsoft.Extensions.Hosting.Internal.Host"}
{"@t":"2020-06-11T11:09:09.5099853Z","@mt":"Failed to locate the development https certificate at '{certificatePath}'.","@l":"Debug","certificatePath":null,"EventId":{"Id":2,"Name":"FailedToLocateDevelopmentCertificateFile"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServer"}
{"@t":"2020-06-11T11:09:10.1970587Z","@mt":"Using development certificate: {certificateSubjectName} (Thumbprint: {certificateThumbprint})","@l":"Debug","certificateSubjectName":"CN=localhost","certificateThumbprint":"ECB336E52AEFAACE31E297FDAE611AD8FC42412A","EventId":{"Name":"LocatedDevelopmentCertificate"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServer"}
{"@t":"2020-06-11T11:09:10.3030694Z","@mt":"Now listening on: {address}","address":"https://localhost:5001","SourceContext":"Microsoft.Hosting.Lifetime"}
{"@t":"2020-06-11T11:09:10.3045503Z","@mt":"Now listening on: {address}","address":"http://localhost:5000","SourceContext":"Microsoft.Hosting.Lifetime"}
{"@t":"2020-06-11T11:09:10.3049775Z","@mt":"Loaded hosting startup assembly {assemblyName}","@l":"Debug","assemblyName":"Serilogging","SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics"}
{"@t":"2020-06-11T11:09:10.3106691Z","@mt":"Application started. Press Ctrl+C to shut down.","SourceContext":"Microsoft.Hosting.Lifetime"}
{"@t":"2020-06-11T11:09:10.3146309Z","@mt":"Hosting environment: {envName}","envName":"Development","SourceContext":"Microsoft.Hosting.Lifetime"}
{"@t":"2020-06-11T11:09:10.3174737Z","@mt":"Content root path: {contentRoot}","contentRoot":"C:\\Users\\qiang.c.chen\\source\\repos\\Serilogging\\Serilogging","SourceContext":"Microsoft.Hosting.Lifetime"}
{"@t":"2020-06-11T11:09:10.3180601Z","@mt":"Hosting started","@l":"Debug","EventId":{"Id":2},"SourceContext":"Microsoft.Extensions.Hosting.Internal.Host"}
{"@t":"2020-06-11T11:09:10.4205148Z","@mt":"Connection id \"{ConnectionId}\" accepted.","@l":"Debug","ConnectionId":"0HM0DUVEUKHEI","EventId":{"Id":39,"Name":"ConnectionAccepted"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel"}
{"@t":"2020-06-11T11:09:10.4246790Z","@mt":"Connection id \"{ConnectionId}\" accepted.","@l":"Debug","ConnectionId":"0HM0DUVEUKHEJ","EventId":{"Id":39,"Name":"ConnectionAccepted"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel"}
{"@t":"2020-06-11T11:09:10.4271116Z","@mt":"Connection id \"{ConnectionId}\" started.","@l":"Debug","ConnectionId":"0HM0DUVEUKHEI","EventId":{"Id":1,"Name":"ConnectionStart"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel"}
{"@t":"2020-06-11T11:09:10.4282127Z","@mt":"Connection id \"{ConnectionId}\" started.","@l":"Debug","ConnectionId":"0HM0DUVEUKHEJ","EventId":{"Id":1,"Name":"ConnectionStart"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel"}
{"@t":"2020-06-11T11:09:10.6166434Z","@mt":"Connection id \"{ConnectionId}\" received FIN.","@l":"Debug","ConnectionId":"0HM0DUVEUKHEI","EventId":{"Id":6,"Name":"ConnectionReadFin"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets"}
{"@t":"2020-06-11T11:09:10.6531944Z","@mt":"Connection id \"{ConnectionId}\" is closed. The last processed stream ID was {HighestOpenedStreamId}.","@l":"Debug","ConnectionId":"0HM0DUVEUKHEI","HighestOpenedStreamId":0,"EventId":{"Id":36,"Name":"Http2ConnectionClosed"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel"}
{"@t":"2020-06-11T11:09:10.6591112Z","@mt":"Connection id \"{ConnectionId}\" sending FIN because: \"{Reason}\"","@l":"Debug","ConnectionId":"0HM0DUVEUKHEI","Reason":"The client closed the connection.","EventId":{"Id":7,"Name":"ConnectionWriteFin"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets"}
{"@t":"2020-06-11T11:09:10.6705772Z","@mt":"Connection id \"{ConnectionId}\" accepted.","@l":"Debug","ConnectionId":"0HM0DUVEUKHEK","EventId":{"Id":39,"Name":"ConnectionAccepted"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel"}
{"@t":"2020-06-11T11:09:10.6713545Z","@mt":"Connection id \"{ConnectionId}\" accepted.","@l":"Debug","ConnectionId":"0HM0DUVEUKHEL","EventId":{"Id":39,"Name":"ConnectionAccepted"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel"}
{"@t":"2020-06-11T11:09:10.6742848Z","@mt":"Connection id \"{ConnectionId}\" started.","@l":"Debug","ConnectionId":"0HM0DUVEUKHEK","EventId":{"Id":1,"Name":"ConnectionStart"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel"}
{"@t":"2020-06-11T11:09:10.6743815Z","@mt":"Connection id \"{ConnectionId}\" started.","@l":"Debug","ConnectionId":"0HM0DUVEUKHEL","EventId":{"Id":1,"Name":"ConnectionStart"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel"}
{"@t":"2020-06-11T11:09:10.6768465Z","@mt":"Connection id \"{ConnectionId}\" stopped.","@l":"Debug","ConnectionId":"0HM0DUVEUKHEI","EventId":{"Id":2,"Name":"ConnectionStop"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel"}
{"@t":"2020-06-11T11:09:10.7775362Z","@mt":"{HostingRequestStartingLog:l}","@r":["Request starting HTTP/2 GET https://localhost:5001/weatherforecast  "],"Protocol":"HTTP/2","Method":"GET","ContentType":null,"ContentLength":null,"Scheme":"https","Host":"localhost:5001","PathBase":"","Path":"/weatherforecast","QueryString":"","HostingRequestStartingLog":"Request starting HTTP/2 GET https://localhost:5001/weatherforecast  ","EventId":{"Id":1},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"0HM0DUVEUKHEJ:00000001","RequestPath":"/weatherforecast","SpanId":"|d64f65a-41b561c299c42928.","TraceId":"d64f65a-41b561c299c42928","ParentId":""}
{"@t":"2020-06-11T11:09:10.7878775Z","@mt":"Wildcard detected, all requests with hosts will be allowed.","@l":"Debug","EventId":{"Name":"WildcardDetected"},"SourceContext":"Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware","RequestId":"0HM0DUVEUKHEJ:00000001","RequestPath":"/weatherforecast","SpanId":"|d64f65a-41b561c299c42928.","TraceId":"d64f65a-41b561c299c42928","ParentId":""}
{"@t":"2020-06-11T11:09:10.8557549Z","@mt":"{CandidateCount} candidate(s) found for the request path '{Path}'","@l":"Debug","CandidateCount":1,"Path":"/weatherforecast","EventId":{"Id":1001,"Name":"CandidatesFound"},"SourceContext":"Microsoft.AspNetCore.Routing.Matching.DfaMatcher","RequestId":"0HM0DUVEUKHEJ:00000001","RequestPath":"/weatherforecast","SpanId":"|d64f65a-41b561c299c42928.","TraceId":"d64f65a-41b561c299c42928","ParentId":""}
{"@t":"2020-06-11T11:09:10.8636611Z","@mt":"Endpoint '{Endpoint}' with route pattern '{RoutePattern}' is valid for the request path '{Path}'","@l":"Debug","Endpoint":"Serilogging.Controllers.WeatherForecastController.Get (Serilogging)","RoutePattern":"WeatherForecast","Path":"/weatherforecast","EventId":{"Id":1005,"Name":"CandiateValid"},"SourceContext":"Microsoft.AspNetCore.Routing.Matching.DfaMatcher","RequestId":"0HM0DUVEUKHEJ:00000001","RequestPath":"/weatherforecast","SpanId":"|d64f65a-41b561c299c42928.","TraceId":"d64f65a-41b561c299c42928","ParentId":""}
{"@t":"2020-06-11T11:09:10.8687653Z","@mt":"Request matched endpoint '{EndpointName}'","@l":"Debug","EndpointName":"Serilogging.Controllers.WeatherForecastController.Get (Serilogging)","EventId":{"Id":1,"Name":"MatchSuccess"},"SourceContext":"Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware","RequestId":"0HM0DUVEUKHEJ:00000001","RequestPath":"/weatherforecast","SpanId":"|d64f65a-41b561c299c42928.","TraceId":"d64f65a-41b561c299c42928","ParentId":""}
{"@t":"2020-06-11T11:09:10.8732004Z","@mt":"Executing endpoint '{EndpointName}'","EndpointName":"Serilogging.Controllers.WeatherForecastController.Get (Serilogging)","EventId":{"Name":"ExecutingEndpoint"},"SourceContext":"Microsoft.AspNetCore.Routing.EndpointMiddleware","RequestId":"0HM0DUVEUKHEJ:00000001","RequestPath":"/weatherforecast","SpanId":"|d64f65a-41b561c299c42928.","TraceId":"d64f65a-41b561c299c42928","ParentId":""}
{"@t":"2020-06-11T11:09:10.8966312Z","@mt":"Registered model binder providers, in the following order: {ModelBinderProviders}","@l":"Debug","ModelBinderProviders":["Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatingPointTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinderProvider"],"EventId":{"Id":12,"Name":"RegisteredModelBinderProviders"},"SourceContext":"Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderFactory","RequestId":"0HM0DUVEUKHEJ:00000001","RequestPath":"/weatherforecast","SpanId":"|d64f65a-41b561c299c42928.","TraceId":"d64f65a-41b561c299c42928","ParentId":""}
{"@t":"2020-06-11T11:09:10.9750576Z","@mt":"Route matched with {RouteData}. Executing controller action with signature {MethodInfo} on controller {Controller} ({AssemblyName}).","RouteData":"{action = \"Get\", controller = \"WeatherForecast\"}","MethodInfo":"System.Collections.Generic.IEnumerable`1[Serilogging.WeatherForecast] Get()","Controller":"Serilogging.Controllers.WeatherForecastController","AssemblyName":"Serilogging","EventId":{"Id":3,"Name":"ControllerActionExecuting"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"88d542c3-ae74-4edc-9b61-83bc8aa4013f","ActionName":"Serilogging.Controllers.WeatherForecastController.Get (Serilogging)","RequestId":"0HM0DUVEUKHEJ:00000001","RequestPath":"/weatherforecast","SpanId":"|d64f65a-41b561c299c42928.","TraceId":"d64f65a-41b561c299c42928","ParentId":""}
{"@t":"2020-06-11T11:09:10.9812596Z","@mt":"Execution plan of {FilterType} filters (in the following order): {Filters}","@l":"Debug","FilterType":"authorization","Filters":["None"],"EventId":{"Id":1,"Name":"FilterExecutionPlan"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"88d542c3-ae74-4edc-9b61-83bc8aa4013f","ActionName":"Serilogging.Controllers.WeatherForecastController.Get (Serilogging)","RequestId":"0HM0DUVEUKHEJ:00000001","RequestPath":"/weatherforecast","SpanId":"|d64f65a-41b561c299c42928.","TraceId":"d64f65a-41b561c299c42928","ParentId":""}
{"@t":"2020-06-11T11:09:10.9849899Z","@mt":"Execution plan of {FilterType} filters (in the following order): {Filters}","@l":"Debug","FilterType":"resource","Filters":["None"],"EventId":{"Id":1,"Name":"FilterExecutionPlan"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"88d542c3-ae74-4edc-9b61-83bc8aa4013f","ActionName":"Serilogging.Controllers.WeatherForecastController.Get (Serilogging)","RequestId":"0HM0DUVEUKHEJ:00000001","RequestPath":"/weatherforecast","SpanId":"|d64f65a-41b561c299c42928.","TraceId":"d64f65a-41b561c299c42928","ParentId":""}
{"@t":"2020-06-11T11:09:10.9906913Z","@mt":"Execution plan of {FilterType} filters (in the following order): {Filters}","@l":"Debug","FilterType":"action","Filters":["Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)","Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"],"EventId":{"Id":1,"Name":"FilterExecutionPlan"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"88d542c3-ae74-4edc-9b61-83bc8aa4013f","ActionName":"Serilogging.Controllers.WeatherForecastController.Get (Serilogging)","RequestId":"0HM0DUVEUKHEJ:00000001","RequestPath":"/weatherforecast","SpanId":"|d64f65a-41b561c299c42928.","TraceId":"d64f65a-41b561c299c42928","ParentId":""}
{"@t":"2020-06-11T11:09:10.9954158Z","@mt":"Execution plan of {FilterType} filters (in the following order): {Filters}","@l":"Debug","FilterType":"exception","Filters":["None"],"EventId":{"Id":1,"Name":"FilterExecutionPlan"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"88d542c3-ae74-4edc-9b61-83bc8aa4013f","ActionName":"Serilogging.Controllers.WeatherForecastController.Get (Serilogging)","RequestId":"0HM0DUVEUKHEJ:00000001","RequestPath":"/weatherforecast","SpanId":"|d64f65a-41b561c299c42928.","TraceId":"d64f65a-41b561c299c42928","ParentId":""}
{"@t":"2020-06-11T11:09:10.9996079Z","@mt":"Execution plan of {FilterType} filters (in the following order): {Filters}","@l":"Debug","FilterType":"result","Filters":["Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"],"EventId":{"Id":1,"Name":"FilterExecutionPlan"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"88d542c3-ae74-4edc-9b61-83bc8aa4013f","ActionName":"Serilogging.Controllers.WeatherForecastController.Get (Serilogging)","RequestId":"0HM0DUVEUKHEJ:00000001","RequestPath":"/weatherforecast","SpanId":"|d64f65a-41b561c299c42928.","TraceId":"d64f65a-41b561c299c42928","ParentId":""}
{"@t":"2020-06-11T11:09:11.0074775Z","@mt":"Executing controller factory for controller {Controller} ({AssemblyName})","@l":"Debug","Controller":"Serilogging.Controllers.WeatherForecastController","AssemblyName":"Serilogging","EventId":{"Id":1,"Name":"ControllerFactoryExecuting"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"88d542c3-ae74-4edc-9b61-83bc8aa4013f","ActionName":"Serilogging.Controllers.WeatherForecastController.Get (Serilogging)","RequestId":"0HM0DUVEUKHEJ:00000001","RequestPath":"/weatherforecast","SpanId":"|d64f65a-41b561c299c42928.","TraceId":"d64f65a-41b561c299c42928","ParentId":""}
{"@t":"2020-06-11T11:09:11.0109119Z","@mt":"Executed controller factory for controller {Controller} ({AssemblyName})","@l":"Debug","Controller":"Serilogging.Controllers.WeatherForecastController","AssemblyName":"Serilogging","EventId":{"Id":2,"Name":"ControllerFactoryExecuted"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"88d542c3-ae74-4edc-9b61-83bc8aa4013f","ActionName":"Serilogging.Controllers.WeatherForecastController.Get (Serilogging)","RequestId":"0HM0DUVEUKHEJ:00000001","RequestPath":"/weatherforecast","SpanId":"|d64f65a-41b561c299c42928.","TraceId":"d64f65a-41b561c299c42928","ParentId":""}
{"@t":"2020-06-11T11:09:11.1363494Z","@mt":"Executing action method {ActionName} - Validation state: {ValidationState}","ActionName":"Serilogging.Controllers.WeatherForecastController.Get (Serilogging)","ValidationState":"Valid","EventId":{"Id":1,"Name":"ActionMethodExecuting"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"88d542c3-ae74-4edc-9b61-83bc8aa4013f","RequestId":"0HM0DUVEUKHEJ:00000001","RequestPath":"/weatherforecast","SpanId":"|d64f65a-41b561c299c42928.","TraceId":"d64f65a-41b561c299c42928","ParentId":""}
{"@t":"2020-06-11T11:09:11.1463978Z","@mt":"chenqiang","SourceContext":"Serilogging.Controllers.WeatherForecastController","ActionId":"88d542c3-ae74-4edc-9b61-83bc8aa4013f","ActionName":"Serilogging.Controllers.WeatherForecastController.Get (Serilogging)","RequestId":"0HM0DUVEUKHEJ:00000001","RequestPath":"/weatherforecast","SpanId":"|d64f65a-41b561c299c42928.","TraceId":"d64f65a-41b561c299c42928","ParentId":""}
{"@t":"2020-06-11T11:09:11.1643740Z","@mt":"Executed action method {ActionName}, returned result {ActionResult} in {ElapsedMilliseconds}ms.","ActionName":"Serilogging.Controllers.WeatherForecastController.Get (Serilogging)","ActionResult":"Microsoft.AspNetCore.Mvc.ObjectResult","ElapsedMilliseconds":13.0117,"EventId":{"Id":2,"Name":"ActionMethodExecuted"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"88d542c3-ae74-4edc-9b61-83bc8aa4013f","RequestId":"0HM0DUVEUKHEJ:00000001","RequestPath":"/weatherforecast","SpanId":"|d64f65a-41b561c299c42928.","TraceId":"d64f65a-41b561c299c42928","ParentId":""}
{"@t":"2020-06-11T11:09:11.1769562Z","@mt":"List of registered output formatters, in the following order: {OutputFormatters}","@l":"Debug","OutputFormatters":["Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter","Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter","Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter","Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter"],"EventId":{"Id":11,"Name":"RegisteredOutputFormatters"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.DefaultOutputFormatterSelector","ActionId":"88d542c3-ae74-4edc-9b61-83bc8aa4013f","ActionName":"Serilogging.Controllers.WeatherForecastController.Get (Serilogging)","RequestId":"0HM0DUVEUKHEJ:00000001","RequestPath":"/weatherforecast","SpanId":"|d64f65a-41b561c299c42928.","TraceId":"d64f65a-41b561c299c42928","ParentId":""}
{"@t":"2020-06-11T11:09:11.1901324Z","@mt":"No information found on request to perform content negotiation.","@l":"Debug","EventId":{"Id":4,"Name":"NoAcceptForNegotiation"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.DefaultOutputFormatterSelector","ActionId":"88d542c3-ae74-4edc-9b61-83bc8aa4013f","ActionName":"Serilogging.Controllers.WeatherForecastController.Get (Serilogging)","RequestId":"0HM0DUVEUKHEJ:00000001","RequestPath":"/weatherforecast","SpanId":"|d64f65a-41b561c299c42928.","TraceId":"d64f65a-41b561c299c42928","ParentId":""}
{"@t":"2020-06-11T11:09:11.1977940Z","@mt":"Attempting to select an output formatter without using a content type as no explicit content types were specified for the response.","@l":"Debug","EventId":{"Id":8,"Name":"SelectingOutputFormatterWithoutUsingContentTypes"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.DefaultOutputFormatterSelector","ActionId":"88d542c3-ae74-4edc-9b61-83bc8aa4013f","ActionName":"Serilogging.Controllers.WeatherForecastController.Get (Serilogging)","RequestId":"0HM0DUVEUKHEJ:00000001","RequestPath":"/weatherforecast","SpanId":"|d64f65a-41b561c299c42928.","TraceId":"d64f65a-41b561c299c42928","ParentId":""}
{"@t":"2020-06-11T11:09:11.2013304Z","@mt":"Attempting to select the first formatter in the output formatters list which can write the result.","@l":"Debug","EventId":{"Id":10,"Name":"SelectingFirstCanWriteFormatter"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.DefaultOutputFormatterSelector","ActionId":"88d542c3-ae74-4edc-9b61-83bc8aa4013f","ActionName":"Serilogging.Controllers.WeatherForecastController.Get (Serilogging)","RequestId":"0HM0DUVEUKHEJ:00000001","RequestPath":"/weatherforecast","SpanId":"|d64f65a-41b561c299c42928.","TraceId":"d64f65a-41b561c299c42928","ParentId":""}
{"@t":"2020-06-11T11:09:11.2038317Z","@mt":"Selected output formatter '{OutputFormatter}' and content type '{ContentType}' to write the response.","@l":"Debug","OutputFormatter":"Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter","ContentType":"application/json","EventId":{"Id":2,"Name":"FormatterSelected"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.DefaultOutputFormatterSelector","ActionId":"88d542c3-ae74-4edc-9b61-83bc8aa4013f","ActionName":"Serilogging.Controllers.WeatherForecastController.Get (Serilogging)","RequestId":"0HM0DUVEUKHEJ:00000001","RequestPath":"/weatherforecast","SpanId":"|d64f65a-41b561c299c42928.","TraceId":"d64f65a-41b561c299c42928","ParentId":""}
{"@t":"2020-06-11T11:09:11.2075186Z","@mt":"Executing ObjectResult, writing value of type '{Type}'.","Type":"Serilogging.WeatherForecast[]","EventId":{"Id":1,"Name":"ObjectResultExecuting"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor","ActionId":"88d542c3-ae74-4edc-9b61-83bc8aa4013f","ActionName":"Serilogging.Controllers.WeatherForecastController.Get (Serilogging)","RequestId":"0HM0DUVEUKHEJ:00000001","RequestPath":"/weatherforecast","SpanId":"|d64f65a-41b561c299c42928.","TraceId":"d64f65a-41b561c299c42928","ParentId":""}
{"@t":"2020-06-11T11:09:11.2741419Z","@mt":"Executed action {ActionName} in {ElapsedMilliseconds}ms","ActionName":"Serilogging.Controllers.WeatherForecastController.Get (Serilogging)","ElapsedMilliseconds":253.234,"EventId":{"Id":2,"Name":"ActionExecuted"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"88d542c3-ae74-4edc-9b61-83bc8aa4013f","RequestId":"0HM0DUVEUKHEJ:00000001","RequestPath":"/weatherforecast","SpanId":"|d64f65a-41b561c299c42928.","TraceId":"d64f65a-41b561c299c42928","ParentId":""}
{"@t":"2020-06-11T11:09:11.2805685Z","@mt":"Executed endpoint '{EndpointName}'","EndpointName":"Serilogging.Controllers.WeatherForecastController.Get (Serilogging)","EventId":{"Id":1,"Name":"ExecutedEndpoint"},"SourceContext":"Microsoft.AspNetCore.Routing.EndpointMiddleware","RequestId":"0HM0DUVEUKHEJ:00000001","RequestPath":"/weatherforecast","SpanId":"|d64f65a-41b561c299c42928.","TraceId":"d64f65a-41b561c299c42928","ParentId":""}
{"@t":"2020-06-11T11:09:11.3137744Z","@mt":"{HostingRequestFinishedLog:l}","@r":["Request finished in 540.397ms 200 application/json; charset=utf-8"],"ElapsedMilliseconds":540.397,"StatusCode":200,"ContentType":"application/json; charset=utf-8","HostingRequestFinishedLog":"Request finished in 540.397ms 200 application/json; charset=utf-8","EventId":{"Id":2},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"0HM0DUVEUKHEJ:00000001","RequestPath":"/weatherforecast","SpanId":"|d64f65a-41b561c299c42928.","TraceId":"d64f65a-41b561c299c42928","ParentId":""}
{"@t":"2020-06-11T11:09:13.1166389Z","@mt":"Application is shutting down...","SourceContext":"Microsoft.Hosting.Lifetime"}
{"@t":"2020-06-11T11:09:13.1291060Z","@mt":"Hosting stopping","@l":"Debug","EventId":{"Id":3},"SourceContext":"Microsoft.Extensions.Hosting.Internal.Host"}
{"@t":"2020-06-11T11:09:13.1746400Z","@mt":"Connection id \"{ConnectionId}\" is closing.","@l":"Debug","ConnectionId":"0HM0DUVEUKHEJ","EventId":{"Id":36,"Name":"Http2ConnectionClosing"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel"}
{"@t":"2020-06-11T11:09:13.1804111Z","@mt":"Connection id \"{ConnectionId}\" is closed. The last processed stream ID was {HighestOpenedStreamId}.","@l":"Debug","ConnectionId":"0HM0DUVEUKHEJ","HighestOpenedStreamId":1,"EventId":{"Id":36,"Name":"Http2ConnectionClosed"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel"}
{"@t":"2020-06-11T11:09:13.1985924Z","@mt":"Connection id \"{ConnectionId}\" received FIN.","@l":"Debug","ConnectionId":"0HM0DUVEUKHEJ","EventId":{"Id":6,"Name":"ConnectionReadFin"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets"}
{"@t":"2020-06-11T11:09:13.2013778Z","@mt":"Connection id \"{ConnectionId}\" sending FIN because: \"{Reason}\"","@l":"Debug","ConnectionId":"0HM0DUVEUKHEJ","Reason":"The client closed the connection.","EventId":{"Id":7,"Name":"ConnectionWriteFin"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets"}
{"@t":"2020-06-11T11:09:13.2113150Z","@mt":"Connection id \"{ConnectionId}\" stopped.","@l":"Debug","ConnectionId":"0HM0DUVEUKHEJ","EventId":{"Id":2,"Name":"ConnectionStop"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel"}
{"@t":"2020-06-11T11:09:14.2535164Z","@mt":"Connection id \"{ConnectionId}\" reset.","@l":"Debug","ConnectionId":"0HM0DUVEUKHEK","EventId":{"Id":19,"Name":"ConnectionReset"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets"}
{"@t":"2020-06-11T11:09:14.2537092Z","@mt":"Connection id \"{ConnectionId}\" reset.","@l":"Debug","ConnectionId":"0HM0DUVEUKHEL","EventId":{"Id":19,"Name":"ConnectionReset"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets"}
{"@t":"2020-06-11T11:09:14.2602912Z","@mt":"Failed to authenticate HTTPS connection.","@l":"Debug","@x":"Microsoft.AspNetCore.Connections.ConnectionResetException: An existing connection was forcibly closed by the remote host.\r\n ---> System.Net.Sockets.SocketException (10054): An existing connection was forcibly closed by the remote host.\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketAwaitableEventArgs.<GetResult>g__ThrowSocketException|7_0(SocketError e)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketAwaitableEventArgs.GetResult()\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketConnection.ProcessReceives()\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketConnection.DoReceive()\r\n   --- End of inner exception stack trace ---\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.GetReadAsyncResult()\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.GetResult(Int16 token)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.DuplexPipeStream.ReadAsyncInternal(Memory`1 destination, CancellationToken cancellationToken)\r\n   at System.Net.FixedSizeReader.ReadPacketAsync(Stream transport, AsyncProtocolRequest request)\r\n   at System.Net.Security.SslStream.ThrowIfExceptional()\r\n   at System.Net.Security.SslStream.InternalEndProcessAuthentication(LazyAsyncResult lazyResult)\r\n   at System.Net.Security.SslStream.EndProcessAuthentication(IAsyncResult result)\r\n   at System.Net.Security.SslStream.EndAuthenticateAsServer(IAsyncResult asyncResult)\r\n   at System.Net.Security.SslStream.<>c.<AuthenticateAsServerAsync>b__69_1(IAsyncResult iar)\r\n   at System.Threading.Tasks.TaskFactory`1.FromAsyncCoreLogic(IAsyncResult iar, Func`2 endFunction, Action`1 endAction, Task`1 promise, Boolean requiresSynchronization)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.AspNetCore.Server.Kestrel.Https.Internal.HttpsConnectionMiddleware.InnerOnConnectionAsync(ConnectionContext context)","EventId":{"Id":1},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel.Https.Internal.HttpsConnectionMiddleware","ConnectionId":"0HM0DUVEUKHEK"}
{"@t":"2020-06-11T11:09:14.2584155Z","@mt":"Failed to authenticate HTTPS connection.","@l":"Debug","@x":"Microsoft.AspNetCore.Connections.ConnectionResetException: An existing connection was forcibly closed by the remote host.\r\n ---> System.Net.Sockets.SocketException (10054): An existing connection was forcibly closed by the remote host.\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketAwaitableEventArgs.<GetResult>g__ThrowSocketException|7_0(SocketError e)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketAwaitableEventArgs.GetResult()\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketConnection.ProcessReceives()\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketConnection.DoReceive()\r\n   --- End of inner exception stack trace ---\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.GetReadAsyncResult()\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.GetResult(Int16 token)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.DuplexPipeStream.ReadAsyncInternal(Memory`1 destination, CancellationToken cancellationToken)\r\n   at System.Net.FixedSizeReader.ReadPacketAsync(Stream transport, AsyncProtocolRequest request)\r\n   at System.Net.Security.SslStream.ThrowIfExceptional()\r\n   at System.Net.Security.SslStream.InternalEndProcessAuthentication(LazyAsyncResult lazyResult)\r\n   at System.Net.Security.SslStream.EndProcessAuthentication(IAsyncResult result)\r\n   at System.Net.Security.SslStream.EndAuthenticateAsServer(IAsyncResult asyncResult)\r\n   at System.Net.Security.SslStream.<>c.<AuthenticateAsServerAsync>b__69_1(IAsyncResult iar)\r\n   at System.Threading.Tasks.TaskFactory`1.FromAsyncCoreLogic(IAsyncResult iar, Func`2 endFunction, Action`1 endAction, Task`1 promise, Boolean requiresSynchronization)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.AspNetCore.Server.Kestrel.Https.Internal.HttpsConnectionMiddleware.InnerOnConnectionAsync(ConnectionContext context)","EventId":{"Id":1},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel.Https.Internal.HttpsConnectionMiddleware","ConnectionId":"0HM0DUVEUKHEL"}
{"@t":"2020-06-11T11:09:14.3495877Z","@mt":"Connection id \"{ConnectionId}\" stopped.","@l":"Debug","ConnectionId":"0HM0DUVEUKHEK","EventId":{"Id":2,"Name":"ConnectionStop"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel"}
{"@t":"2020-06-11T11:09:14.3585817Z","@mt":"Connection id \"{ConnectionId}\" sending FIN because: \"{Reason}\"","@l":"Debug","ConnectionId":"0HM0DUVEUKHEK","Reason":"The Socket transport's send loop completed gracefully.","EventId":{"Id":7,"Name":"ConnectionWriteFin"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets"}
{"@t":"2020-06-11T11:09:14.3585818Z","@mt":"Connection id \"{ConnectionId}\" stopped.","@l":"Debug","ConnectionId":"0HM0DUVEUKHEL","EventId":{"Id":2,"Name":"ConnectionStop"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel"}
{"@t":"2020-06-11T11:09:14.3603146Z","@mt":"Connection id \"{ConnectionId}\" sending FIN because: \"{Reason}\"","@l":"Debug","ConnectionId":"0HM0DUVEUKHEL","Reason":"The Socket transport's send loop completed gracefully.","EventId":{"Id":7,"Name":"ConnectionWriteFin"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets"}
{"@t":"2020-06-11T11:09:14.3672353Z","@mt":"Hosting stopped","@l":"Debug","EventId":{"Id":4},"SourceContext":"Microsoft.Extensions.Hosting.Internal.Host"}
{"@t":"2020-06-11T11:11:29.5039592Z","@mt":"Start web host"}
{"@t":"2020-06-11T11:11:31.8283241Z","@mt":"Hosting starting","@l":"Debug","EventId":{"Id":1},"SourceContext":"Microsoft.Extensions.Hosting.Internal.Host"}
{"@t":"2020-06-11T11:11:33.3599210Z","@mt":"Failed to locate the development https certificate at '{certificatePath}'.","@l":"Debug","certificatePath":null,"EventId":{"Id":2,"Name":"FailedToLocateDevelopmentCertificateFile"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServer"}
{"@t":"2020-06-11T11:11:33.8172213Z","@mt":"Using development certificate: {certificateSubjectName} (Thumbprint: {certificateThumbprint})","@l":"Debug","certificateSubjectName":"CN=localhost","certificateThumbprint":"ECB336E52AEFAACE31E297FDAE611AD8FC42412A","EventId":{"Name":"LocatedDevelopmentCertificate"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServer"}
{"@t":"2020-06-11T11:11:34.1112668Z","@mt":"Now listening on: {address}","address":"https://localhost:5001","SourceContext":"Microsoft.Hosting.Lifetime"}
{"@t":"2020-06-11T11:11:34.1492882Z","@mt":"Now listening on: {address}","address":"http://localhost:5000","SourceContext":"Microsoft.Hosting.Lifetime"}
{"@t":"2020-06-11T11:11:34.1497356Z","@mt":"Loaded hosting startup assembly {assemblyName}","@l":"Debug","assemblyName":"Serilogging","SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics"}
{"@t":"2020-06-11T11:11:34.1502208Z","@mt":"Application started. Press Ctrl+C to shut down.","SourceContext":"Microsoft.Hosting.Lifetime"}
{"@t":"2020-06-11T11:11:34.1505004Z","@mt":"Hosting environment: {envName}","envName":"Development","SourceContext":"Microsoft.Hosting.Lifetime"}
{"@t":"2020-06-11T11:11:34.1508376Z","@mt":"Content root path: {contentRoot}","contentRoot":"C:\\Users\\qiang.c.chen\\source\\repos\\Serilogging\\Serilogging","SourceContext":"Microsoft.Hosting.Lifetime"}
{"@t":"2020-06-11T11:11:34.1511953Z","@mt":"Hosting started","@l":"Debug","EventId":{"Id":2},"SourceContext":"Microsoft.Extensions.Hosting.Internal.Host"}
{"@t":"2020-06-11T11:11:34.3256786Z","@mt":"Connection id \"{ConnectionId}\" accepted.","@l":"Debug","ConnectionId":"0HM0DV0PR0VRU","EventId":{"Id":39,"Name":"ConnectionAccepted"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel"}
{"@t":"2020-06-11T11:11:34.3256786Z","@mt":"Connection id \"{ConnectionId}\" accepted.","@l":"Debug","ConnectionId":"0HM0DV0PR0VRV","EventId":{"Id":39,"Name":"ConnectionAccepted"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel"}
{"@t":"2020-06-11T11:11:34.3325112Z","@mt":"Connection id \"{ConnectionId}\" started.","@l":"Debug","ConnectionId":"0HM0DV0PR0VRV","EventId":{"Id":1,"Name":"ConnectionStart"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel"}
{"@t":"2020-06-11T11:11:34.3332381Z","@mt":"Connection id \"{ConnectionId}\" started.","@l":"Debug","ConnectionId":"0HM0DV0PR0VRU","EventId":{"Id":1,"Name":"ConnectionStart"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel"}
{"@t":"2020-06-11T11:11:34.3909793Z","@mt":"Connection id \"{ConnectionId}\" accepted.","@l":"Debug","ConnectionId":"0HM0DV0PR0VS0","EventId":{"Id":39,"Name":"ConnectionAccepted"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel"}
{"@t":"2020-06-11T11:11:34.4116865Z","@mt":"Connection id \"{ConnectionId}\" started.","@l":"Debug","ConnectionId":"0HM0DV0PR0VS0","EventId":{"Id":1,"Name":"ConnectionStart"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel"}
{"@t":"2020-06-11T11:11:34.4728386Z","@mt":"Connection id \"{ConnectionId}\" accepted.","@l":"Debug","ConnectionId":"0HM0DV0PR0VS1","EventId":{"Id":39,"Name":"ConnectionAccepted"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel"}
{"@t":"2020-06-11T11:11:34.4773941Z","@mt":"Connection id \"{ConnectionId}\" started.","@l":"Debug","ConnectionId":"0HM0DV0PR0VS1","EventId":{"Id":1,"Name":"ConnectionStart"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel"}
{"@t":"2020-06-11T11:11:34.6309128Z","@mt":"Connection id \"{ConnectionId}\" received FIN.","@l":"Debug","ConnectionId":"0HM0DV0PR0VS0","EventId":{"Id":6,"Name":"ConnectionReadFin"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets"}
{"@t":"2020-06-11T11:11:34.7244109Z","@mt":"Connection id \"{ConnectionId}\" is closed. The last processed stream ID was {HighestOpenedStreamId}.","@l":"Debug","ConnectionId":"0HM0DV0PR0VS0","HighestOpenedStreamId":0,"EventId":{"Id":36,"Name":"Http2ConnectionClosed"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel"}
{"@t":"2020-06-11T11:11:34.7410272Z","@mt":"Connection id \"{ConnectionId}\" sending FIN because: \"{Reason}\"","@l":"Debug","ConnectionId":"0HM0DV0PR0VS0","Reason":"The client closed the connection.","EventId":{"Id":7,"Name":"ConnectionWriteFin"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets"}
{"@t":"2020-06-11T11:11:34.7603381Z","@mt":"Connection id \"{ConnectionId}\" stopped.","@l":"Debug","ConnectionId":"0HM0DV0PR0VS0","EventId":{"Id":2,"Name":"ConnectionStop"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel"}
{"@t":"2020-06-11T11:11:34.8894670Z","@mt":"{HostingRequestStartingLog:l}","@r":["Request starting HTTP/2 GET https://localhost:5001/weatherforecast  "],"Protocol":"HTTP/2","Method":"GET","ContentType":null,"ContentLength":null,"Scheme":"https","Host":"localhost:5001","PathBase":"","Path":"/weatherforecast","QueryString":"","HostingRequestStartingLog":"Request starting HTTP/2 GET https://localhost:5001/weatherforecast  ","EventId":{"Id":1},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"0HM0DV0PR0VS1:00000001","RequestPath":"/weatherforecast","SpanId":"|3544af-47a993c85cc9ed4b.","TraceId":"3544af-47a993c85cc9ed4b","ParentId":""}
{"@t":"2020-06-11T11:11:34.9067082Z","@mt":"Wildcard detected, all requests with hosts will be allowed.","@l":"Debug","EventId":{"Name":"WildcardDetected"},"SourceContext":"Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware","RequestId":"0HM0DV0PR0VS1:00000001","RequestPath":"/weatherforecast","SpanId":"|3544af-47a993c85cc9ed4b.","TraceId":"3544af-47a993c85cc9ed4b","ParentId":""}
{"@t":"2020-06-11T11:11:34.9885250Z","@mt":"{CandidateCount} candidate(s) found for the request path '{Path}'","@l":"Debug","CandidateCount":1,"Path":"/weatherforecast","EventId":{"Id":1001,"Name":"CandidatesFound"},"SourceContext":"Microsoft.AspNetCore.Routing.Matching.DfaMatcher","RequestId":"0HM0DV0PR0VS1:00000001","RequestPath":"/weatherforecast","SpanId":"|3544af-47a993c85cc9ed4b.","TraceId":"3544af-47a993c85cc9ed4b","ParentId":""}
{"@t":"2020-06-11T11:11:35.0363885Z","@mt":"Endpoint '{Endpoint}' with route pattern '{RoutePattern}' is valid for the request path '{Path}'","@l":"Debug","Endpoint":"Serilogging.Controllers.WeatherForecastController.Get (Serilogging)","RoutePattern":"WeatherForecast","Path":"/weatherforecast","EventId":{"Id":1005,"Name":"CandiateValid"},"SourceContext":"Microsoft.AspNetCore.Routing.Matching.DfaMatcher","RequestId":"0HM0DV0PR0VS1:00000001","RequestPath":"/weatherforecast","SpanId":"|3544af-47a993c85cc9ed4b.","TraceId":"3544af-47a993c85cc9ed4b","ParentId":""}
{"@t":"2020-06-11T11:11:35.0567726Z","@mt":"Request matched endpoint '{EndpointName}'","@l":"Debug","EndpointName":"Serilogging.Controllers.WeatherForecastController.Get (Serilogging)","EventId":{"Id":1,"Name":"MatchSuccess"},"SourceContext":"Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware","RequestId":"0HM0DV0PR0VS1:00000001","RequestPath":"/weatherforecast","SpanId":"|3544af-47a993c85cc9ed4b.","TraceId":"3544af-47a993c85cc9ed4b","ParentId":""}
{"@t":"2020-06-11T11:11:35.0714879Z","@mt":"Executing endpoint '{EndpointName}'","EndpointName":"Serilogging.Controllers.WeatherForecastController.Get (Serilogging)","EventId":{"Name":"ExecutingEndpoint"},"SourceContext":"Microsoft.AspNetCore.Routing.EndpointMiddleware","RequestId":"0HM0DV0PR0VS1:00000001","RequestPath":"/weatherforecast","SpanId":"|3544af-47a993c85cc9ed4b.","TraceId":"3544af-47a993c85cc9ed4b","ParentId":""}
{"@t":"2020-06-11T11:11:35.1114995Z","@mt":"Registered model binder providers, in the following order: {ModelBinderProviders}","@l":"Debug","ModelBinderProviders":["Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatingPointTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinderProvider"],"EventId":{"Id":12,"Name":"RegisteredModelBinderProviders"},"SourceContext":"Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderFactory","RequestId":"0HM0DV0PR0VS1:00000001","RequestPath":"/weatherforecast","SpanId":"|3544af-47a993c85cc9ed4b.","TraceId":"3544af-47a993c85cc9ed4b","ParentId":""}
{"@t":"2020-06-11T11:11:35.6371278Z","@mt":"Route matched with {RouteData}. Executing controller action with signature {MethodInfo} on controller {Controller} ({AssemblyName}).","RouteData":"{action = \"Get\", controller = \"WeatherForecast\"}","MethodInfo":"System.Collections.Generic.IEnumerable`1[Serilogging.WeatherForecast] Get()","Controller":"Serilogging.Controllers.WeatherForecastController","AssemblyName":"Serilogging","EventId":{"Id":3,"Name":"ControllerActionExecuting"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"48fc2119-ddff-4909-b6c5-56e3e2fb4ff1","ActionName":"Serilogging.Controllers.WeatherForecastController.Get (Serilogging)","RequestId":"0HM0DV0PR0VS1:00000001","RequestPath":"/weatherforecast","SpanId":"|3544af-47a993c85cc9ed4b.","TraceId":"3544af-47a993c85cc9ed4b","ParentId":""}
{"@t":"2020-06-11T11:11:35.6529509Z","@mt":"Execution plan of {FilterType} filters (in the following order): {Filters}","@l":"Debug","FilterType":"authorization","Filters":["None"],"EventId":{"Id":1,"Name":"FilterExecutionPlan"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"48fc2119-ddff-4909-b6c5-56e3e2fb4ff1","ActionName":"Serilogging.Controllers.WeatherForecastController.Get (Serilogging)","RequestId":"0HM0DV0PR0VS1:00000001","RequestPath":"/weatherforecast","SpanId":"|3544af-47a993c85cc9ed4b.","TraceId":"3544af-47a993c85cc9ed4b","ParentId":""}
{"@t":"2020-06-11T11:11:35.6558404Z","@mt":"Execution plan of {FilterType} filters (in the following order): {Filters}","@l":"Debug","FilterType":"resource","Filters":["None"],"EventId":{"Id":1,"Name":"FilterExecutionPlan"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"48fc2119-ddff-4909-b6c5-56e3e2fb4ff1","ActionName":"Serilogging.Controllers.WeatherForecastController.Get (Serilogging)","RequestId":"0HM0DV0PR0VS1:00000001","RequestPath":"/weatherforecast","SpanId":"|3544af-47a993c85cc9ed4b.","TraceId":"3544af-47a993c85cc9ed4b","ParentId":""}
{"@t":"2020-06-11T11:11:35.6604901Z","@mt":"Execution plan of {FilterType} filters (in the following order): {Filters}","@l":"Debug","FilterType":"action","Filters":["Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)","Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"],"EventId":{"Id":1,"Name":"FilterExecutionPlan"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"48fc2119-ddff-4909-b6c5-56e3e2fb4ff1","ActionName":"Serilogging.Controllers.WeatherForecastController.Get (Serilogging)","RequestId":"0HM0DV0PR0VS1:00000001","RequestPath":"/weatherforecast","SpanId":"|3544af-47a993c85cc9ed4b.","TraceId":"3544af-47a993c85cc9ed4b","ParentId":""}
{"@t":"2020-06-11T11:11:35.6675549Z","@mt":"Execution plan of {FilterType} filters (in the following order): {Filters}","@l":"Debug","FilterType":"exception","Filters":["None"],"EventId":{"Id":1,"Name":"FilterExecutionPlan"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"48fc2119-ddff-4909-b6c5-56e3e2fb4ff1","ActionName":"Serilogging.Controllers.WeatherForecastController.Get (Serilogging)","RequestId":"0HM0DV0PR0VS1:00000001","RequestPath":"/weatherforecast","SpanId":"|3544af-47a993c85cc9ed4b.","TraceId":"3544af-47a993c85cc9ed4b","ParentId":""}
{"@t":"2020-06-11T11:11:35.6718083Z","@mt":"Execution plan of {FilterType} filters (in the following order): {Filters}","@l":"Debug","FilterType":"result","Filters":["Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"],"EventId":{"Id":1,"Name":"FilterExecutionPlan"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"48fc2119-ddff-4909-b6c5-56e3e2fb4ff1","ActionName":"Serilogging.Controllers.WeatherForecastController.Get (Serilogging)","RequestId":"0HM0DV0PR0VS1:00000001","RequestPath":"/weatherforecast","SpanId":"|3544af-47a993c85cc9ed4b.","TraceId":"3544af-47a993c85cc9ed4b","ParentId":""}
{"@t":"2020-06-11T11:11:35.6756146Z","@mt":"Executing controller factory for controller {Controller} ({AssemblyName})","@l":"Debug","Controller":"Serilogging.Controllers.WeatherForecastController","AssemblyName":"Serilogging","EventId":{"Id":1,"Name":"ControllerFactoryExecuting"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"48fc2119-ddff-4909-b6c5-56e3e2fb4ff1","ActionName":"Serilogging.Controllers.WeatherForecastController.Get (Serilogging)","RequestId":"0HM0DV0PR0VS1:00000001","RequestPath":"/weatherforecast","SpanId":"|3544af-47a993c85cc9ed4b.","TraceId":"3544af-47a993c85cc9ed4b","ParentId":""}
{"@t":"2020-06-11T11:11:35.6869305Z","@mt":"Executed controller factory for controller {Controller} ({AssemblyName})","@l":"Debug","Controller":"Serilogging.Controllers.WeatherForecastController","AssemblyName":"Serilogging","EventId":{"Id":2,"Name":"ControllerFactoryExecuted"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"48fc2119-ddff-4909-b6c5-56e3e2fb4ff1","ActionName":"Serilogging.Controllers.WeatherForecastController.Get (Serilogging)","RequestId":"0HM0DV0PR0VS1:00000001","RequestPath":"/weatherforecast","SpanId":"|3544af-47a993c85cc9ed4b.","TraceId":"3544af-47a993c85cc9ed4b","ParentId":""}
{"@t":"2020-06-11T11:11:36.0458951Z","@mt":"Executing action method {ActionName} - Validation state: {ValidationState}","ActionName":"Serilogging.Controllers.WeatherForecastController.Get (Serilogging)","ValidationState":"Valid","EventId":{"Id":1,"Name":"ActionMethodExecuting"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"48fc2119-ddff-4909-b6c5-56e3e2fb4ff1","RequestId":"0HM0DV0PR0VS1:00000001","RequestPath":"/weatherforecast","SpanId":"|3544af-47a993c85cc9ed4b.","TraceId":"3544af-47a993c85cc9ed4b","ParentId":""}
{"@t":"2020-06-11T11:11:36.1050083Z","@mt":"chenqiang","SourceContext":"Serilogging.Controllers.WeatherForecastController","ActionId":"48fc2119-ddff-4909-b6c5-56e3e2fb4ff1","ActionName":"Serilogging.Controllers.WeatherForecastController.Get (Serilogging)","RequestId":"0HM0DV0PR0VS1:00000001","RequestPath":"/weatherforecast","SpanId":"|3544af-47a993c85cc9ed4b.","TraceId":"3544af-47a993c85cc9ed4b","ParentId":""}
{"@t":"2020-06-11T11:11:36.1680781Z","@mt":"Executed action method {ActionName}, returned result {ActionResult} in {ElapsedMilliseconds}ms.","ActionName":"Serilogging.Controllers.WeatherForecastController.Get (Serilogging)","ActionResult":"Microsoft.AspNetCore.Mvc.ObjectResult","ElapsedMilliseconds":47.2071,"EventId":{"Id":2,"Name":"ActionMethodExecuted"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"48fc2119-ddff-4909-b6c5-56e3e2fb4ff1","RequestId":"0HM0DV0PR0VS1:00000001","RequestPath":"/weatherforecast","SpanId":"|3544af-47a993c85cc9ed4b.","TraceId":"3544af-47a993c85cc9ed4b","ParentId":""}
{"@t":"2020-06-11T11:11:36.2337490Z","@mt":"List of registered output formatters, in the following order: {OutputFormatters}","@l":"Debug","OutputFormatters":["Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter","Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter","Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter","Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter"],"EventId":{"Id":11,"Name":"RegisteredOutputFormatters"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.DefaultOutputFormatterSelector","ActionId":"48fc2119-ddff-4909-b6c5-56e3e2fb4ff1","ActionName":"Serilogging.Controllers.WeatherForecastController.Get (Serilogging)","RequestId":"0HM0DV0PR0VS1:00000001","RequestPath":"/weatherforecast","SpanId":"|3544af-47a993c85cc9ed4b.","TraceId":"3544af-47a993c85cc9ed4b","ParentId":""}
{"@t":"2020-06-11T11:11:36.3008513Z","@mt":"No information found on request to perform content negotiation.","@l":"Debug","EventId":{"Id":4,"Name":"NoAcceptForNegotiation"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.DefaultOutputFormatterSelector","ActionId":"48fc2119-ddff-4909-b6c5-56e3e2fb4ff1","ActionName":"Serilogging.Controllers.WeatherForecastController.Get (Serilogging)","RequestId":"0HM0DV0PR0VS1:00000001","RequestPath":"/weatherforecast","SpanId":"|3544af-47a993c85cc9ed4b.","TraceId":"3544af-47a993c85cc9ed4b","ParentId":""}
{"@t":"2020-06-11T11:11:36.3118366Z","@mt":"Attempting to select an output formatter without using a content type as no explicit content types were specified for the response.","@l":"Debug","EventId":{"Id":8,"Name":"SelectingOutputFormatterWithoutUsingContentTypes"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.DefaultOutputFormatterSelector","ActionId":"48fc2119-ddff-4909-b6c5-56e3e2fb4ff1","ActionName":"Serilogging.Controllers.WeatherForecastController.Get (Serilogging)","RequestId":"0HM0DV0PR0VS1:00000001","RequestPath":"/weatherforecast","SpanId":"|3544af-47a993c85cc9ed4b.","TraceId":"3544af-47a993c85cc9ed4b","ParentId":""}
{"@t":"2020-06-11T11:11:36.3279881Z","@mt":"Attempting to select the first formatter in the output formatters list which can write the result.","@l":"Debug","EventId":{"Id":10,"Name":"SelectingFirstCanWriteFormatter"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.DefaultOutputFormatterSelector","ActionId":"48fc2119-ddff-4909-b6c5-56e3e2fb4ff1","ActionName":"Serilogging.Controllers.WeatherForecastController.Get (Serilogging)","RequestId":"0HM0DV0PR0VS1:00000001","RequestPath":"/weatherforecast","SpanId":"|3544af-47a993c85cc9ed4b.","TraceId":"3544af-47a993c85cc9ed4b","ParentId":""}
{"@t":"2020-06-11T11:11:36.3397250Z","@mt":"Selected output formatter '{OutputFormatter}' and content type '{ContentType}' to write the response.","@l":"Debug","OutputFormatter":"Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter","ContentType":"application/json","EventId":{"Id":2,"Name":"FormatterSelected"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.DefaultOutputFormatterSelector","ActionId":"48fc2119-ddff-4909-b6c5-56e3e2fb4ff1","ActionName":"Serilogging.Controllers.WeatherForecastController.Get (Serilogging)","RequestId":"0HM0DV0PR0VS1:00000001","RequestPath":"/weatherforecast","SpanId":"|3544af-47a993c85cc9ed4b.","TraceId":"3544af-47a993c85cc9ed4b","ParentId":""}
{"@t":"2020-06-11T11:11:36.3450221Z","@mt":"Executing ObjectResult, writing value of type '{Type}'.","Type":"Serilogging.WeatherForecast[]","EventId":{"Id":1,"Name":"ObjectResultExecuting"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor","ActionId":"48fc2119-ddff-4909-b6c5-56e3e2fb4ff1","ActionName":"Serilogging.Controllers.WeatherForecastController.Get (Serilogging)","RequestId":"0HM0DV0PR0VS1:00000001","RequestPath":"/weatherforecast","SpanId":"|3544af-47a993c85cc9ed4b.","TraceId":"3544af-47a993c85cc9ed4b","ParentId":""}
{"@t":"2020-06-11T11:11:36.4413176Z","@mt":"Executed action {ActionName} in {ElapsedMilliseconds}ms","ActionName":"Serilogging.Controllers.WeatherForecastController.Get (Serilogging)","ElapsedMilliseconds":734.5805,"EventId":{"Id":2,"Name":"ActionExecuted"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"48fc2119-ddff-4909-b6c5-56e3e2fb4ff1","RequestId":"0HM0DV0PR0VS1:00000001","RequestPath":"/weatherforecast","SpanId":"|3544af-47a993c85cc9ed4b.","TraceId":"3544af-47a993c85cc9ed4b","ParentId":""}
{"@t":"2020-06-11T11:11:36.4714227Z","@mt":"Executed endpoint '{EndpointName}'","EndpointName":"Serilogging.Controllers.WeatherForecastController.Get (Serilogging)","EventId":{"Id":1,"Name":"ExecutedEndpoint"},"SourceContext":"Microsoft.AspNetCore.Routing.EndpointMiddleware","RequestId":"0HM0DV0PR0VS1:00000001","RequestPath":"/weatherforecast","SpanId":"|3544af-47a993c85cc9ed4b.","TraceId":"3544af-47a993c85cc9ed4b","ParentId":""}
{"@t":"2020-06-11T11:11:36.4782683Z","@mt":"HTTP {RequestMethod} {RequestPath} responded {StatusCode} in {Elapsed:0.0000} ms","@r":["1555.2117"],"RequestMethod":"GET","RequestPath":"/weatherforecast","StatusCode":200,"Elapsed":1555.2117,"SourceContext":"Serilog.AspNetCore.RequestLoggingMiddleware","RequestId":"0HM0DV0PR0VS1:00000001","SpanId":"|3544af-47a993c85cc9ed4b.","TraceId":"3544af-47a993c85cc9ed4b","ParentId":""}
{"@t":"2020-06-11T11:11:36.5082487Z","@mt":"{HostingRequestFinishedLog:l}","@r":["Request finished in 1606.9955ms 200 application/json; charset=utf-8"],"ElapsedMilliseconds":1606.9955,"StatusCode":200,"ContentType":"application/json; charset=utf-8","HostingRequestFinishedLog":"Request finished in 1606.9955ms 200 application/json; charset=utf-8","EventId":{"Id":2},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"0HM0DV0PR0VS1:00000001","RequestPath":"/weatherforecast","SpanId":"|3544af-47a993c85cc9ed4b.","TraceId":"3544af-47a993c85cc9ed4b","ParentId":""}
{"@t":"2020-06-11T11:11:39.3349688Z","@mt":"Connection id \"{ConnectionId}\" reset.","@l":"Debug","ConnectionId":"0HM0DV0PR0VRU","EventId":{"Id":19,"Name":"ConnectionReset"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets"}
{"@t":"2020-06-11T11:11:39.3652057Z","@mt":"Connection id \"{ConnectionId}\" reset.","@l":"Debug","ConnectionId":"0HM0DV0PR0VRV","EventId":{"Id":19,"Name":"ConnectionReset"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets"}
{"@t":"2020-06-11T11:11:39.5664694Z","@mt":"Failed to authenticate HTTPS connection.","@l":"Debug","@x":"Microsoft.AspNetCore.Connections.ConnectionResetException: An existing connection was forcibly closed by the remote host.\r\n ---> System.Net.Sockets.SocketException (10054): An existing connection was forcibly closed by the remote host.\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketAwaitableEventArgs.<GetResult>g__ThrowSocketException|7_0(SocketError e)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketAwaitableEventArgs.GetResult()\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketConnection.ProcessReceives()\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketConnection.DoReceive()\r\n   --- End of inner exception stack trace ---\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.GetReadAsyncResult()\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.GetResult(Int16 token)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.DuplexPipeStream.ReadAsyncInternal(Memory`1 destination, CancellationToken cancellationToken)\r\n   at System.Net.FixedSizeReader.ReadPacketAsync(Stream transport, AsyncProtocolRequest request)\r\n   at System.Net.Security.SslStream.ThrowIfExceptional()\r\n   at System.Net.Security.SslStream.InternalEndProcessAuthentication(LazyAsyncResult lazyResult)\r\n   at System.Net.Security.SslStream.EndProcessAuthentication(IAsyncResult result)\r\n   at System.Net.Security.SslStream.EndAuthenticateAsServer(IAsyncResult asyncResult)\r\n   at System.Net.Security.SslStream.<>c.<AuthenticateAsServerAsync>b__69_1(IAsyncResult iar)\r\n   at System.Threading.Tasks.TaskFactory`1.FromAsyncCoreLogic(IAsyncResult iar, Func`2 endFunction, Action`1 endAction, Task`1 promise, Boolean requiresSynchronization)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.AspNetCore.Server.Kestrel.Https.Internal.HttpsConnectionMiddleware.InnerOnConnectionAsync(ConnectionContext context)","EventId":{"Id":1},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel.Https.Internal.HttpsConnectionMiddleware","ConnectionId":"0HM0DV0PR0VRU"}
{"@t":"2020-06-11T11:11:39.4429387Z","@mt":"Failed to authenticate HTTPS connection.","@l":"Debug","@x":"Microsoft.AspNetCore.Connections.ConnectionResetException: An existing connection was forcibly closed by the remote host.\r\n ---> System.Net.Sockets.SocketException (10054): An existing connection was forcibly closed by the remote host.\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketAwaitableEventArgs.<GetResult>g__ThrowSocketException|7_0(SocketError e)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketAwaitableEventArgs.GetResult()\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketConnection.ProcessReceives()\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketConnection.DoReceive()\r\n   --- End of inner exception stack trace ---\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.GetReadAsyncResult()\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.GetResult(Int16 token)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.DuplexPipeStream.ReadAsyncInternal(Memory`1 destination, CancellationToken cancellationToken)\r\n   at System.Net.FixedSizeReader.ReadPacketAsync(Stream transport, AsyncProtocolRequest request)\r\n   at System.Net.Security.SslStream.ThrowIfExceptional()\r\n   at System.Net.Security.SslStream.InternalEndProcessAuthentication(LazyAsyncResult lazyResult)\r\n   at System.Net.Security.SslStream.EndProcessAuthentication(IAsyncResult result)\r\n   at System.Net.Security.SslStream.EndAuthenticateAsServer(IAsyncResult asyncResult)\r\n   at System.Net.Security.SslStream.<>c.<AuthenticateAsServerAsync>b__69_1(IAsyncResult iar)\r\n   at System.Threading.Tasks.TaskFactory`1.FromAsyncCoreLogic(IAsyncResult iar, Func`2 endFunction, Action`1 endAction, Task`1 promise, Boolean requiresSynchronization)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.AspNetCore.Server.Kestrel.Https.Internal.HttpsConnectionMiddleware.InnerOnConnectionAsync(ConnectionContext context)","EventId":{"Id":1},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel.Https.Internal.HttpsConnectionMiddleware","ConnectionId":"0HM0DV0PR0VRV"}
{"@t":"2020-06-11T11:11:40.5103907Z","@mt":"Connection id \"{ConnectionId}\" stopped.","@l":"Debug","ConnectionId":"0HM0DV0PR0VRU","EventId":{"Id":2,"Name":"ConnectionStop"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel"}
{"@t":"2020-06-11T11:11:40.5280564Z","@mt":"Connection id \"{ConnectionId}\" stopped.","@l":"Debug","ConnectionId":"0HM0DV0PR0VRV","EventId":{"Id":2,"Name":"ConnectionStop"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel"}
{"@t":"2020-06-11T11:11:40.5374528Z","@mt":"Connection id \"{ConnectionId}\" sending FIN because: \"{Reason}\"","@l":"Debug","ConnectionId":"0HM0DV0PR0VRU","Reason":"The Socket transport's send loop completed gracefully.","EventId":{"Id":7,"Name":"ConnectionWriteFin"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets"}
{"@t":"2020-06-11T11:11:40.5417562Z","@mt":"Connection id \"{ConnectionId}\" sending FIN because: \"{Reason}\"","@l":"Debug","ConnectionId":"0HM0DV0PR0VRV","Reason":"The Socket transport's send loop completed gracefully.","EventId":{"Id":7,"Name":"ConnectionWriteFin"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets"}
